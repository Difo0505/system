{"version":3,"sources":["webpack:///45.23899cd6295e93cd01b0.js","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./actions/admin_actions.jsx?c2a4**","webpack:///./components/login/components/login_mfa.jsx?99b8*"],"names":["webpackJsonp","1374","module","exports","__webpack_require__","global","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_getPrototypeOf","_getPrototypeOf2","_classCallCheck2","_classCallCheck3","_createClass2","_createClass3","_possibleConstructorReturn2","_possibleConstructorReturn3","_inherits2","_inherits3","_login_mfa","_login_mfa2","_utils","Utils","newObj","key","prototype","hasOwnProperty","call","_user_actions","_admin_actions","_propTypes","_propTypes2","_react","_react2","_reactIntl","EmailToLDAP","_React$Component","props","this","_this","__proto__","submit","bind","preSubmit","state","passwordError","ldapError","ldapPasswordError","serverError","showMfa","e","_this2","preventDefault","password","refs","emailpassword","localizeMessage","setState","ldapId","ldapid","trim","ldapPassword","ldappassword","checkMfa","email","requiresMfa","err","error","message","loginId","token","_this3","emailToLdap","data","follow_link","window","location","href","formClass","createElement","className","passwordClass","ldapClass","ldapPasswordClass","loginPlaceholder","mm_config","LdapLoginFieldName","passwordPlaceholder","LdapPasswordFieldName","content","onSubmit","FormattedMessage","id","defaultMessage","values","site","SiteName","type","style","display","name","ref","autoComplete","placeholder","spellCheck","Component","defaultProps","propTypes","string","1644","saveConfig","config","success","_web_client2","reloadConfig","AsyncClient","getConfig","adminResetMfa","userId","_users","getUser","dispatch","getState","getClusterStatus","dispatchError","saveComplianceReports","job","testEmail","ldapTest","invalidateAllCaches","recycleDatabaseConnection","adminResetPassword","samlCertificateStatus","ldapSyncNow","getOAuthAppInfo","clientId","allowOAuth2","params","responseType","response_type","client_id","redirectUri","redirect_uri","scope","emailToOAuth","newType","oauthToEmail","_es","browserHistory","push","regenerateOAuthAppSecret","oauthAppId","uploadBrandImage","brandImage","uploadLicenseFile","file","removeLicenseFile","uploadCertificateFile","certificateFile","removeCertificateFile","certificateId","_web_client","_async_client","_redux_store","_redux_store2","1785","LoginMfa","handleSubmit","replace","errorClass","autoFocus","isRequired","func"],"mappings":"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","file":"45.23899cd6295e93cd01b0.js","sourcesContent":["webpackJsonp([45],{\n\n/***/ 1374:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(51);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(32);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(33);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(50);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(49);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _login_mfa = __webpack_require__(1785);\n\nvar _login_mfa2 = _interopRequireDefault(_login_mfa);\n\nvar _utils = __webpack_require__(28);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _user_actions = __webpack_require__(114);\n\nvar _admin_actions = __webpack_require__(1644);\n\nvar _propTypes = __webpack_require__(151);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(14);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactIntl = __webpack_require__(197);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EmailToLDAP = function (_React$Component) {\n    (0, _inherits3.default)(EmailToLDAP, _React$Component);\n\n    function EmailToLDAP(props) {\n        (0, _classCallCheck3.default)(this, EmailToLDAP);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (EmailToLDAP.__proto__ || (0, _getPrototypeOf2.default)(EmailToLDAP)).call(this, props));\n\n        _this.submit = _this.submit.bind(_this);\n        _this.preSubmit = _this.preSubmit.bind(_this);\n\n        _this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(EmailToLDAP, [{\n        key: 'preSubmit',\n        value: function preSubmit(e) {\n            var _this2 = this;\n\n            e.preventDefault();\n\n            var state = {\n                passwordError: '',\n                ldapError: '',\n                ldapPasswordError: '',\n                serverError: ''\n            };\n\n            var password = this.refs.emailpassword.value;\n            if (!password) {\n                state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n                this.setState(state);\n                return;\n            }\n\n            var ldapId = this.refs.ldapid.value.trim();\n            if (!ldapId) {\n                state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n                this.setState(state);\n                return;\n            }\n\n            var ldapPassword = this.refs.ldappassword.value;\n            if (!ldapPassword) {\n                state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n                this.setState(state);\n                return;\n            }\n\n            state.password = password;\n            state.ldapId = ldapId;\n            state.ldapPassword = ldapPassword;\n            this.setState(state);\n\n            (0, _user_actions.checkMfa)(this.props.email, function (requiresMfa) {\n                if (requiresMfa) {\n                    _this2.setState({ showMfa: true });\n                } else {\n                    _this2.submit(_this2.props.email, password, '', ldapId, ldapPassword);\n                }\n            }, function (err) {\n                _this2.setState({ error: err.message });\n            });\n        }\n    }, {\n        key: 'submit',\n        value: function submit(loginId, password, token, ldapId, ldapPassword) {\n            var _this3 = this;\n\n            (0, _admin_actions.emailToLdap)(loginId, password, token, ldapId || this.state.ldapId, ldapPassword || this.state.ldapPassword, function (data) {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            }, function (err) {\n                _this3.setState({ serverError: err.message, showMfa: false });\n            });\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = null;\n            var formClass = 'form-group';\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.serverError\n                    )\n                );\n                formClass += ' has-error';\n            }\n\n            var passwordError = null;\n            var passwordClass = 'form-group';\n            if (this.state.passwordError) {\n                passwordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.passwordError\n                    )\n                );\n                passwordClass += ' has-error';\n            }\n\n            var ldapError = null;\n            var ldapClass = 'form-group';\n            if (this.state.ldapError) {\n                ldapError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapError\n                    )\n                );\n                ldapClass += ' has-error';\n            }\n\n            var ldapPasswordError = null;\n            var ldapPasswordClass = 'form-group';\n            if (this.state.ldapPasswordError) {\n                ldapPasswordError = _react2.default.createElement(\n                    'div',\n                    { className: 'form-group has-error' },\n                    _react2.default.createElement(\n                        'label',\n                        { className: 'control-label' },\n                        this.state.ldapPasswordError\n                    )\n                );\n                ldapPasswordClass += ' has-error';\n            }\n\n            var loginPlaceholder = void 0;\n            if (global.window.mm_config.LdapLoginFieldName) {\n                loginPlaceholder = global.window.mm_config.LdapLoginFieldName;\n            } else {\n                loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n            }\n\n            var passwordPlaceholder = void 0;\n            if (global.window.mm_config.LdapPasswordFieldName) {\n                passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n            } else {\n                passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n            }\n\n            var content = void 0;\n            if (this.state.showMfa) {\n                content = _react2.default.createElement(_login_mfa2.default, {\n                    loginId: this.props.email,\n                    password: this.state.password,\n                    submit: this.submit\n                });\n            } else {\n                content = _react2.default.createElement(\n                    'form',\n                    {\n                        onSubmit: this.preSubmit,\n                        className: formClass\n                    },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.ssoType',\n                            defaultMessage: 'Upon claiming your account, you will only be able to login with AD/LDAP'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.ssoNote',\n                            defaultMessage: 'You must already have a valid AD/LDAP account'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.enterPwd',\n                            defaultMessage: 'Enter the password for your {site} email account',\n                            values: {\n                                site: global.window.mm_config.SiteName\n                            }\n                        })\n                    ),\n                    _react2.default.createElement('input', {\n                        type: 'text',\n                        style: { display: 'none' },\n                        name: 'fakeusernameremembered'\n                    }),\n                    _react2.default.createElement(\n                        'div',\n                        { className: passwordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'emailPassword',\n                            ref: 'emailpassword',\n                            autoComplete: 'off',\n                            placeholder: Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password'),\n                            spellCheck: 'false'\n                        })\n                    ),\n                    passwordError,\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.enterLdapPwd',\n                            defaultMessage: 'Enter the ID and password for your AD/LDAP account'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapClass },\n                        _react2.default.createElement('input', {\n                            type: 'text',\n                            className: 'form-control',\n                            name: 'ldapId',\n                            ref: 'ldapid',\n                            autoComplete: 'off',\n                            placeholder: loginPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapError,\n                    _react2.default.createElement(\n                        'div',\n                        { className: ldapPasswordClass },\n                        _react2.default.createElement('input', {\n                            type: 'password',\n                            className: 'form-control',\n                            name: 'ldapPassword',\n                            ref: 'ldappassword',\n                            autoComplete: 'off',\n                            placeholder: passwordPlaceholder,\n                            spellCheck: 'false'\n                        })\n                    ),\n                    ldapPasswordError,\n                    _react2.default.createElement(\n                        'button',\n                        {\n                            type: 'submit',\n                            className: 'btn btn-primary'\n                        },\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'claim.email_to_ldap.switchTo',\n                            defaultMessage: 'Switch account to AD/LDAP'\n                        })\n                    ),\n                    serverError\n                );\n            }\n\n            return _react2.default.createElement(\n                'div',\n                null,\n                _react2.default.createElement(\n                    'h3',\n                    null,\n                    _react2.default.createElement(_reactIntl.FormattedMessage, {\n                        id: 'claim.email_to_ldap.title',\n                        defaultMessage: 'Switch Email/Password Account to AD/LDAP'\n                    })\n                ),\n                content\n            );\n        }\n    }]);\n    return EmailToLDAP;\n}(_react2.default.Component); // Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nexports.default = EmailToLDAP;\n\n\nEmailToLDAP.defaultProps = {};\nEmailToLDAP.propTypes = {\n    email: _propTypes2.default.string\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))\n\n/***/ }),\n\n/***/ 1644:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.saveConfig = saveConfig;\nexports.reloadConfig = reloadConfig;\nexports.adminResetMfa = adminResetMfa;\nexports.getClusterStatus = getClusterStatus;\nexports.saveComplianceReports = saveComplianceReports;\nexports.testEmail = testEmail;\nexports.ldapTest = ldapTest;\nexports.invalidateAllCaches = invalidateAllCaches;\nexports.recycleDatabaseConnection = recycleDatabaseConnection;\nexports.adminResetPassword = adminResetPassword;\nexports.samlCertificateStatus = samlCertificateStatus;\nexports.ldapSyncNow = ldapSyncNow;\nexports.getOAuthAppInfo = getOAuthAppInfo;\nexports.allowOAuth2 = allowOAuth2;\nexports.emailToLdap = emailToLdap;\nexports.emailToOAuth = emailToOAuth;\nexports.oauthToEmail = oauthToEmail;\nexports.regenerateOAuthAppSecret = regenerateOAuthAppSecret;\nexports.uploadBrandImage = uploadBrandImage;\nexports.uploadLicenseFile = uploadLicenseFile;\nexports.removeLicenseFile = removeLicenseFile;\nexports.uploadCertificateFile = uploadCertificateFile;\nexports.removeCertificateFile = removeCertificateFile;\n\nvar _web_client = __webpack_require__(52);\n\nvar _web_client2 = _interopRequireDefault(_web_client);\n\nvar _async_client = __webpack_require__(113);\n\nvar AsyncClient = _interopRequireWildcard(_async_client);\n\nvar _es = __webpack_require__(58);\n\nvar _redux_store = __webpack_require__(36);\n\nvar _redux_store2 = _interopRequireDefault(_redux_store);\n\nvar _users = __webpack_require__(115);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2017-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar dispatch = _redux_store2.default.dispatch;\n\n// Redux actions\n\nvar getState = _redux_store2.default.getState;\n\nfunction saveConfig(config, success, error) {\n    _web_client2.default.saveConfig(config, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction reloadConfig(success, error) {\n    _web_client2.default.reloadConfig(function () {\n        AsyncClient.getConfig();\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction adminResetMfa(userId, success, error) {\n    _web_client2.default.adminResetMfa(userId, function () {\n        (0, _users.getUser)(userId)(dispatch, getState);\n\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction getClusterStatus(success, error) {\n    _web_client2.default.getClusterStatus(function (data) {\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        AsyncClient.dispatchError(err, 'getClusterStatus');\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction saveComplianceReports(job, success, error) {\n    _web_client2.default.saveComplianceReports(job, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction testEmail(config, success, error) {\n    _web_client2.default.testEmail(config, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction ldapTest(success, error) {\n    _web_client2.default.ldapTest(function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction invalidateAllCaches(success, error) {\n    _web_client2.default.invalidateAllCaches(function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction recycleDatabaseConnection(success, error) {\n    _web_client2.default.recycleDatabaseConnection(function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction adminResetPassword(userId, password, success, error) {\n    _web_client2.default.adminResetPassword(userId, password, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction samlCertificateStatus(success, error) {\n    _web_client2.default.samlCertificateStatus(function (data) {\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction ldapSyncNow(success, error) {\n    _web_client2.default.ldapSyncNow(function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction getOAuthAppInfo(clientId, success, error) {\n    _web_client2.default.getOAuthAppInfo(clientId, function (data) {\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction allowOAuth2(params, success, error) {\n    var responseType = params.response_type;\n    var clientId = params.client_id;\n    var redirectUri = params.redirect_uri;\n    var state = params.state;\n    var scope = params.scope;\n\n    _web_client2.default.allowOAuth2(responseType, clientId, redirectUri, state, scope, function (data) {\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction emailToLdap(loginId, password, token, ldapId, ldapPassword, success, error) {\n    _web_client2.default.emailToLdap(loginId, password, token, ldapId, ldapPassword, function (data) {\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction emailToOAuth(loginId, password, token, newType, success, error) {\n    _web_client2.default.emailToOAuth(loginId, password, token, newType, function (data) {\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction oauthToEmail(email, password, success, error) {\n    _web_client2.default.oauthToEmail(email, password, function (data) {\n        if (data.follow_link) {\n            _es.browserHistory.push(data.follow_link);\n        }\n\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction regenerateOAuthAppSecret(oauthAppId, success, error) {\n    _web_client2.default.regenerateOAuthAppSecret(oauthAppId, function (data) {\n        if (success) {\n            success(data);\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction uploadBrandImage(brandImage, success, error) {\n    _web_client2.default.uploadBrandImage(brandImage, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction uploadLicenseFile(file, success, error) {\n    _web_client2.default.uploadLicenseFile(file, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction removeLicenseFile(success, error) {\n    _web_client2.default.removeLicenseFile(function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction uploadCertificateFile(certificateFile, success, error) {\n    _web_client2.default.uploadCertificateFile(certificateFile, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\nfunction removeCertificateFile(certificateId, success, error) {\n    _web_client2.default.removeCertificateFile(certificateId, function () {\n        if (success) {\n            success();\n        }\n    }, function (err) {\n        if (error) {\n            error(err);\n        }\n    });\n}\n\n/***/ }),\n\n/***/ 1785:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _getPrototypeOf = __webpack_require__(51);\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = __webpack_require__(32);\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = __webpack_require__(33);\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = __webpack_require__(50);\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = __webpack_require__(49);\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _utils = __webpack_require__(28);\n\nvar Utils = _interopRequireWildcard(_utils);\n\nvar _reactIntl = __webpack_require__(197);\n\nvar _propTypes = __webpack_require__(151);\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = __webpack_require__(14);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nvar LoginMfa = function (_React$Component) {\n    (0, _inherits3.default)(LoginMfa, _React$Component);\n\n    function LoginMfa(props) {\n        (0, _classCallCheck3.default)(this, LoginMfa);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (LoginMfa.__proto__ || (0, _getPrototypeOf2.default)(LoginMfa)).call(this, props));\n\n        _this.handleSubmit = _this.handleSubmit.bind(_this);\n\n        _this.state = {\n            serverError: ''\n        };\n        return _this;\n    }\n\n    (0, _createClass3.default)(LoginMfa, [{\n        key: 'handleSubmit',\n        value: function handleSubmit(e) {\n            e.preventDefault();\n            var state = {};\n\n            var token = this.refs.token.value.trim().replace(/\\s/g, '');\n            if (!token) {\n                state.serverError = Utils.localizeMessage('login_mfa.tokenReq', 'Please enter an MFA token');\n                this.setState(state);\n                return;\n            }\n\n            state.serverError = '';\n            this.setState(state);\n\n            this.props.submit(this.props.loginId, this.props.password, token);\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var serverError = void 0;\n            var errorClass = '';\n            if (this.state.serverError) {\n                serverError = _react2.default.createElement(\n                    'label',\n                    { className: 'control-label' },\n                    this.state.serverError\n                );\n                errorClass = ' has-error';\n            }\n\n            return _react2.default.createElement(\n                'form',\n                { onSubmit: this.handleSubmit },\n                _react2.default.createElement(\n                    'div',\n                    { className: 'signup__email-container' },\n                    _react2.default.createElement(\n                        'p',\n                        null,\n                        _react2.default.createElement(_reactIntl.FormattedMessage, {\n                            id: 'login_mfa.enterToken',\n                            defaultMessage: 'To complete the sign in process, please enter a token from your smartphone\\'s authenticator'\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'form-group' + errorClass },\n                        serverError\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'form-group' + errorClass },\n                        _react2.default.createElement('input', {\n                            type: 'text',\n                            className: 'form-control',\n                            name: 'token',\n                            ref: 'token',\n                            placeholder: Utils.localizeMessage('login_mfa.token', 'MFA Token'),\n                            spellCheck: 'false',\n                            autoComplete: 'off',\n                            autoFocus: true\n                        })\n                    ),\n                    _react2.default.createElement(\n                        'div',\n                        { className: 'form-group' },\n                        _react2.default.createElement(\n                            'button',\n                            {\n                                type: 'submit',\n                                className: 'btn btn-primary'\n                            },\n                            _react2.default.createElement(_reactIntl.FormattedMessage, {\n                                id: 'login_mfa.submit',\n                                defaultMessage: 'Submit'\n                            })\n                        )\n                    )\n                )\n            );\n        }\n    }]);\n    return LoginMfa;\n}(_react2.default.Component);\n\nexports.default = LoginMfa;\n\nLoginMfa.defaultProps = {};\n\nLoginMfa.propTypes = {\n    loginId: _propTypes2.default.string.isRequired,\n    password: _propTypes2.default.string.isRequired,\n    submit: _propTypes2.default.func.isRequired\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 45.23899cd6295e93cd01b0.js","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport LoginMfa from 'components/login/components/login_mfa.jsx';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport {checkMfa} from 'actions/user_actions.jsx';\nimport {emailToLdap} from 'actions/admin_actions.jsx';\n\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EmailToLDAP extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.submit = this.submit.bind(this);\n        this.preSubmit = this.preSubmit.bind(this);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false\n        };\n    }\n\n    preSubmit(e) {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: ''\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        checkMfa(\n            this.props.email,\n            (requiresMfa) => {\n                if (requiresMfa) {\n                    this.setState({showMfa: true});\n                } else {\n                    this.submit(this.props.email, password, '', ldapId, ldapPassword);\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n\n    submit(loginId, password, token, ldapId, ldapPassword) {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({serverError: err.message, showMfa: false});\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (global.window.mm_config.LdapLoginFieldName) {\n            loginPlaceholder = global.window.mm_config.LdapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let passwordPlaceholder;\n        if (global.window.mm_config.LdapPasswordFieldName) {\n            passwordPlaceholder = global.window.mm_config.LdapPasswordFieldName;\n        } else {\n            passwordPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapPwd', 'AD/LDAP Password');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: global.window.mm_config.SiteName\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={{display: 'none'}}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={Utils.localizeMessage('claim.email_to_ldap.pwd', 'Password')}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nEmailToLDAP.defaultProps = {\n};\nEmailToLDAP.propTypes = {\n    email: PropTypes.string\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/claim/components/email_to_ldap.jsx","// Copyright (c) 2017-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport Client from 'client/web_client.jsx';\nimport * as AsyncClient from 'utils/async_client.jsx';\nimport {browserHistory} from 'react-router/es6';\n\n// Redux actions\nimport store from 'stores/redux_store.jsx';\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nimport {getUser} from 'mattermost-redux/actions/users';\n\nexport function saveConfig(config, success, error) {\n    Client.saveConfig(\n        config,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function reloadConfig(success, error) {\n    Client.reloadConfig(\n        () => {\n            AsyncClient.getConfig();\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function adminResetMfa(userId, success, error) {\n    Client.adminResetMfa(\n        userId,\n        () => {\n            getUser(userId)(dispatch, getState);\n\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function getClusterStatus(success, error) {\n    Client.getClusterStatus(\n        (data) => {\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            AsyncClient.dispatchError(err, 'getClusterStatus');\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function saveComplianceReports(job, success, error) {\n    Client.saveComplianceReports(\n        job,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function testEmail(config, success, error) {\n    Client.testEmail(\n        config,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function ldapTest(success, error) {\n    Client.ldapTest(\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function invalidateAllCaches(success, error) {\n    Client.invalidateAllCaches(\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function recycleDatabaseConnection(success, error) {\n    Client.recycleDatabaseConnection(\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function adminResetPassword(userId, password, success, error) {\n    Client.adminResetPassword(\n        userId,\n        password,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function samlCertificateStatus(success, error) {\n    Client.samlCertificateStatus(\n        (data) => {\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function ldapSyncNow(success, error) {\n    Client.ldapSyncNow(\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function getOAuthAppInfo(clientId, success, error) {\n    Client.getOAuthAppInfo(\n        clientId,\n        (data) => {\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function allowOAuth2(params, success, error) {\n    const responseType = params.response_type;\n    const clientId = params.client_id;\n    const redirectUri = params.redirect_uri;\n    const state = params.state;\n    const scope = params.scope;\n\n    Client.allowOAuth2(responseType, clientId, redirectUri, state, scope,\n        (data) => {\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function emailToLdap(loginId, password, token, ldapId, ldapPassword, success, error) {\n    Client.emailToLdap(\n        loginId,\n        password,\n        token,\n        ldapId,\n        ldapPassword,\n        (data) => {\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function emailToOAuth(loginId, password, token, newType, success, error) {\n    Client.emailToOAuth(\n        loginId,\n        password,\n        token,\n        newType,\n        (data) => {\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function oauthToEmail(email, password, success, error) {\n    Client.oauthToEmail(\n        email,\n        password,\n        (data) => {\n            if (data.follow_link) {\n                browserHistory.push(data.follow_link);\n            }\n\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function regenerateOAuthAppSecret(oauthAppId, success, error) {\n    Client.regenerateOAuthAppSecret(\n        oauthAppId,\n        (data) => {\n            if (success) {\n                success(data);\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function uploadBrandImage(brandImage, success, error) {\n    Client.uploadBrandImage(\n        brandImage,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function uploadLicenseFile(file, success, error) {\n    Client.uploadLicenseFile(\n        file,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function removeLicenseFile(success, error) {\n    Client.removeLicenseFile(\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function uploadCertificateFile(certificateFile, success, error) {\n    Client.uploadCertificateFile(\n        certificateFile,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\nexport function removeCertificateFile(certificateId, success, error) {\n    Client.removeCertificateFile(\n        certificateId,\n        () => {\n            if (success) {\n                success();\n            }\n        },\n        (err) => {\n            if (error) {\n                error(err);\n            }\n        }\n    );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./actions/admin_actions.jsx","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See License.txt for license information.\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\n\nexport default class LoginMfa extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.state = {\n            serverError: ''\n        };\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const state = {};\n\n        const token = this.refs.token.value.trim().replace(/\\s/g, '');\n        if (!token) {\n            state.serverError = Utils.localizeMessage('login_mfa.tokenReq', 'Please enter an MFA token');\n            this.setState(state);\n            return;\n        }\n\n        state.serverError = '';\n        this.setState(state);\n\n        this.props.submit(this.props.loginId, this.props.password, token);\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            ref='token'\n                            placeholder={Utils.localizeMessage('login_mfa.token', 'MFA Token')}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <button\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='login_mfa.submit'\n                                defaultMessage='Submit'\n                            />\n                        </button>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\nLoginMfa.defaultProps = {\n};\n\nLoginMfa.propTypes = {\n    loginId: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n    submit: PropTypes.func.isRequired\n};\n\n\n\n// WEBPACK FOOTER //\n// ./components/login/components/login_mfa.jsx"],"sourceRoot":""}