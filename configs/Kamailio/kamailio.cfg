#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v4.3 - default configuration script
#     - web: http://www.kamailio.org
#     - git: http://sip-router.org
#
# Direct your questions about this file to: <sr-users@lists.sip-router.org>
#
# Refer to the Core CookBook at http://www.kamailio.org/wiki/
# for an explanation of possible statements, functions and parameters.

####### Include Local Config If Exists #########
import_file "kamailio-local.cfg"

####### Defined Values #########
#!define DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!define FLAG_FROM_SWITCH 1
#!define FLAG_FROM_USER 2
#!define LISTEN_UDP_PUBLIC udp:kamailio-wan-ip:5060
#!define LISTEN_UDP_PRIVATE udp:192.168.171.121:5060

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL2

fork=yes
children=4

auto_aliases=no

listen=LISTEN_UDP_PUBLIC
listen=LISTEN_UDP_PRIVATE

sip_warning=no

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
#!ifdef WITH_SRCPATH
mpath="modules"
#!else
mpath="/usr/lib64/kamailio/modules/"
#!endif

loadmodule "db_mysql.so"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"

loadmodule "usrloc.so"
loadmodule "registrar.so"

loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "mi_rpc.so"


loadmodule "avpops.so"

loadmodule "dispatcher.so"
loadmodule "nathelper.so"
#loadmodule "rtpproxy.so"
loadmodule "rtpengine.so"
loadmodule "stun.so"
loadmodule "uac.so"
loadmodule "ipops.so"
loadmodule "auth.so"
loadmodule "auth_db.so"


# ----------------- setting module-specific parameters ---------------

# ------- AVP-OPS params ---------
modparam("avpops","db_url", DBURL)
modparam("avpops","avp_table","dispatcher")

# ----- dispatcher params -----
modparam("dispatcher", "db_url", DBURL)
modparam("dispatcher", "table_name", "dispatcher")
modparam("dispatcher", "flags", 2)
modparam("dispatcher", "dst_avp", "$avp(AVP_DST)")
modparam("dispatcher", "grp_avp", "$avp(AVP_GRP)")
modparam("dispatcher", "cnt_avp", "$avp(AVP_CNT)")

#modparam("rr", "enable_full_lr", 1)
#modparam("rr", "append_fromtag", 1)

# ----- rtpproxy params -----
modparam("rtpengine", "rtpengine_sock", "udp:localhost:22222")
modparam("nathelper", "received_avp", "$avp(s:rcv)")

# ----- usrloc params -----
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)

# ----- auth_db params -----
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")

####### Routing Logic ########
# main request routing logic

route {
	# per request initial checks
	route(SANITY_CHECK);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			t_relay();
		}
		exit;
	}

if (method=="REGISTER") {
        if (!www_authorize("kamailio test", "subscriber")) {
                www_challenge("kamailio test", "0");
                exit;
        }
        if (!save("location"))
                sl_reply_error();
    exit;
  }
  lookup("aliases");
  if (!lookup("location")) {
    sl_send_reply("404", "Not Found");
    exit;
  }

	# check src ip and set flag
	route(CHECK_SOURCE_IP);

	# always add record_route when forwarding SUBSCRIBEs
	if (is_method("SUBSCRIBE")) {
		exit;
	}

	if (!is_method("REGISTER") && isflagset(FLAG_FROM_USER)) {
                # authenticate requests
                if (!proxy_authorize("kamailio test","subscriber")) {
                        proxy_challenge("kamailio test","0");
                        exit;
                }

                consume_credentials();
        }

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)
	t_check_trans();

	# dispatch destinations
	route(DISPATCH);
}

route[SANITY_CHECK] {

	if (!mf_process_maxfwd_header("10")) {
		#xlog("L_WARN", "$ci|end|too much hops, not enough barley");
		send_reply("483", "Too Many Hops");
		exit;
	}

	if (!sanity_check()) {
		#xlog("L_WARN", "$ci|end|message is insane");
		exit;
	}

	if ($ua == "friendly-scanner" ||
		$ua == "sundayddr" ||
		$ua =~ "sipcli" ) {
		#xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
		exit;
	}

}

route[CHECK_SOURCE_IP] {
	if(ds_is_from_list()) {
		setflag(FLAG_FROM_SWITCH);
	} else {
		setflag(FLAG_FROM_USER);
	}
}

route[RELAY] {

	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) {
			t_on_failure("MANAGE_FAILURE");
		}
	}

	if (isflagset(FLAG_FROM_USER)) {
		force_send_socket(LISTEN_UDP_PRIVATE);
 	} else {
		force_send_socket(LISTEN_UDP_PUBLIC);
	}


	if (!t_relay()) {
		sl_reply_error();
	}
	#exit;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (loose_route()) {
			route(RELAY);
		} else {
			if (is_method("NOTIFY")) {
				route(RELAY);
			}

			if (is_method("SUBSCRIBE") && uri == myself) {
				# in-dialog subscribe requests
				exit;
			}

			if (is_method("ACK")) {
				if (t_check_trans()) {
					# non loose-route, but stateful ACK;
					# must be ACK after a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ... ignore and discard.
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}
}

# Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	if (t_is_canceled()) {
		exit;
	}
}

onreply_route[1] {
	if (has_body("application/sdp")) {
		rtpengine_answer();
	}
}

onreply_route[2] {
	if (has_body("application/sdp")) {
		rtpengine_offer();
	}
}

# Dispatch requests
route[DISPATCH] {
	# round robin dispatching on gateways group '1'
	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");
	if (is_method("INVITE|REFER")) {
		record_route();
		if (has_body("application/sdp")) {
			if (rtpengine_offer()) {
				t_on_reply("1");
			}
		} else {
			t_on_reply("2");
		}
		if (isflagset(FLAG_FROM_USER)) {
			prefix("kb-");
			if(!ds_select_dst("1", "4")) {
				send_reply("404", "No destination");
				exit;
			}
		}
	}

	if (is_method("ACK") && has_body("application/sdp")) {
		rtpengine_answer();
	}

	route(RELAY);
}
