- include_vars: vault/main.yaml
  tags: include

- name: Check mysql service is running
  command: service mysql status
  register: check_mysql
  ignore_errors: yes
  changed_when: False
  check_mode: no

- name: Throw error if mysql is running
  fail: msg="Please turn off mysql service"
  when: check_mysql.rc == 0

- name: Install MariaDB Repo on CentOS
  copy: src=MariaDB-{{ ansible_distribution }}{{ ansible_distribution_major_version }}-{{ mariadb_version }}.repo.j2 dest=/etc/yum.repos.d/MariaDB.repo

- name: Install MariaDB
  yum: name="{{ item }}" update_cache=yes
  with_items:
  - MariaDB-client
  - MariaDB-server
  - MariaDB-devel
  - MariaDB-shared
  - MariaDB-common

- name: Install percona repo
  yum: name="{{ percona_centos_url }}" update_cache=yes
  when:
    - ansible_distribution == "{{ distro_centos.name }}"

- name: Install percona-toolkit and percona-xtrabackup
  yum: name="{{ item }}" update_cache=yes
  with_items:
  - percona-xtrabackup
  - percona-toolkit

- name: Get pip
  get_url: url={{ pip_url }} dest=/tmp/get-pip.py mode=0644

- name: Install pip
  command: /usr/bin/python get-pip.py
  args:
    chdir: /tmp

- name: Install MySQL-python
  pip: name=MySQL-python

- name: Create tmpdir, logdir and datadir
  file: path="{{ item }}" state=directory owner=mysql group=mysql
  with_items:
  - "{{ mariadb_logdir }}"
  - "{{ mariadb_tmpdir }}"
  - "{{ mariadb_datadir }}"
  - "{{ mariadb_datadir_base }}"
  ignore_errors: yes

- stat:
    path: "{{ mariadb_datadir }}"
  register: datadir

- name: Copy files in mariadb_datadir to mariadb_datadir_origin
  command: cp -r {{ mariadb_datadir }}/ {{ mariadb_datadir_origin }}
  when: mariadb_datadir_origin != mariadb_datadir and datadir.stat.islnk is defined and datadir.stat.islnk == False

- name: Move /var/lib/mysql to /var/lib/mysql.bak
  command: mv "{{ mariadb_datadir }}" /var/lib/mysql.bak
  when: mariadb_datadir_origin != mariadb_datadir and datadir.stat.islnk is defined and datadir.stat.islnk == False
  ignore_errors: yes

- name: Create softlink
  file:
    src: "{{ mariadb_datadir_origin }}"
    dest: "{{ mariadb_datadir }}"
    state: link
  when: mariadb_datadir_origin != mariadb_datadir and datadir.stat.islnk is defined and datadir.stat.islnk == False

- name: Ensure all are mysql:mysql mariadb_datadir_origin
  command: chown -R mysql:mysql {{ mariadb_datadir_origin }}

- name: Ensure all are mysql:mysql on softlink
  command: chown mysql:mysql {{ mariadb_datadir }}

- name: Config MariaDB
  template: src=mariadb.conf.j2 dest=/etc/my.cnf.d/server.cnf backup=yes
  tags: reconfig

- name: Config MariaDB
  template: src=xtrabackup.conf.j2 dest=/etc/my.cnf.d/xtrabackup.cnf backup=yes
  tags: reconfig

- name: set vm.swappiness in sysctl.conf
  sysctl: name=vm.swappiness value="{{ sysctl_vm_swappiness }}" state=present sysctl_set=yes reload=yes ignoreerrors=yes

- name: Change ulimit
  copy: src=mysqld_ulimit.j2 dest=/etc/security/limits.d/95-mysqld.conf

- name: Check if ulimit in service script
  command: grep -Fq "ulimit" /etc/init.d/mysql
  register: check_ulimit_mysql
  ignore_errors: yes
  changed_when: False
  check_mode: no
  tags: change_ulimit

- name: Change limit in service script
  lineinfile:
    line: "{{ item }}"
    dest: /etc/init.d/mysql
    insertbefore: '^case \"\$mode\" in'
  with_items:
  - ulimit -u 32000
  - ulimit -n 32000
  when:
  - check_ulimit_mysql.rc != 0
  ignore_errors: yes
  tags: change_ulimit

- name: Create /etc/systemd/system/mariadb.service.d
  file: path=/etc/systemd/system/mariadb.service.d state=directory mode=0755
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version7 }}"

- name: Customize mariadb service script
  copy: src=mariadb_service_limits.conf.j2 dest=/etc/systemd/system/mariadb.service.d/10_limits.conf
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version7 }}"

- name: Enable and start mariadb
  service: name=mysql enabled=yes state=restarted
  tags: restart_mariadb

- name: Remove anonymous user
  mysql_user:
    login_user: root
    login_port: "{{ mysql_port }}"
    login_password: ''
    name: ''
    host_all: yes
    state: absent
  ignore_errors: yes

- name: Remove test db
  mysql_db:
    login_user: root
    login_port: "{{ mysql_port }}"
    login_password: ''
    name: test
    state: absent
  ignore_errors: yes

- name: Disallow remote login for root
  mysql_user:
    login_user: root
    login_port: "{{ mysql_port }}"
    login_password: ''
    name: root
    state: absent
    host: "{{ ansible_hostname }}"
  ignore_errors: yes

- name: Create the replication users
  mysql_user:
    login_user: root
    login_port: "{{ mysql_port }}"
    login_password: ''
    name: repl_user
    host: "{{ mariadb_repl_user_host }}"
    password: "{{ mariadb_repl_user_passwd }}"
    priv: "*.*:REPLICATION SLAVE"
    state: present

- name: Check if slave is already configured for replication
  mysql_replication: mode=getslave
  ignore_errors: true
  register: slave
  when: mysql_repl_role == 'slave'

- name: Ensure the hostname entry for master is available for the client.
  lineinfile: dest=/etc/hosts regexp="{{ mysql_repl_master }}" line="{{ hostvars[mysql_repl_master].ansible_default_ipv4.address + "   " + mysql_repl_master }}" state=present
  when: slave.Is_Slave == "false" and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: Get the current master servers replication status
  mysql_replication: mode=getmaster
  delegate_to: "{{ mysql_repl_master }}"
  register: repl_stat
  when: slave.Is_Slave == "false" and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: Change the master in slave to start the replication
  mysql_replication:
    mode: changemaster
    master_host: "{{ mysql_repl_master }}"
    master_log_file: "{{ repl_stat.File }}"
    master_log_pos: "{{ repl_stat.Position }}"
    master_user: repl_user
    master_password: "{{ mariadb_repl_user_passwd }}"
  when: slave.Is_Slave == "false" and mysql_repl_role == 'slave' and mysql_repl_master is defined

- name: Set root passwd
  mysql_user:
    name: root
    password: "{{ mysql_root_passwd }}"
    priv: "*.*:ALL,GRANT"
    state: present
    login_user: root
    login_port: "{{ mysql_port }}"
    login_password: ''
    login_host: localhost
    host: "{{ item }}"
  with_items:
    - 127.0.0.1
    - ::1
    - localhost
  ignore_errors: yes

- name: Set /root/.my.cnf
  template:
    src: client.cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: 0440

- name: Check mariadb status
  command: service mysql status
  tags: check_service
