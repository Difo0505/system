- name: Config hostname
  hostname:
    name: "{{ hostname }}"

- name: Config /etc/hosts follow hostname
  lineinfile:
    dest: /etc/hosts
    state: present
    line: '{{ item }}'
  with_items:
    - "127.0.0.1 {{ hostname }}"
    - "{{ ansible_default_ipv4.address }} {{ hostname }}"
    
- name: Config temporary gateway
  command: route add default gw "{{ gateway_ip }}"
  ignore_errors: yes

- name: Config persistent gateway
  lineinfile:
    dest: /etc/sysconfig/network
    state: present
    regexp: '^GATEWAY='
    line: 'GATEWAY={{ gateway_ip }}'
  when: gateway_persistent

- name: Config nameserver
  blockinfile:
    dest: /etc/resolv.conf
    block: |
      {{ nameservers }}

- name: Install epel-release
  yum: name="epel-release" update_cache=yes

- name: Install elrepo
  yum:
    name: "{{ elrepo_centos_7_url }}"
    update_cache: yes
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version7 }}"

- name: Install elrepo
  yum:
    name: "{{ elrepo_centos_6_url }}"
    update_cache: yes
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version6 }}"

- name: Install elrepo
  yum:
    name: "{{ elrepo_centos_5_url }}"
    update_cache: yes
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version5 }}"

- name: Install remi repo
  yum:
    name: "{{ remi_centos_7_url }}"
    update_cache: yes
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version7 }}"

- name: Install remi repo
  yum:
    name: "{{ remi_centos_6_url }}"
    update_cache: yes
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version6 }}"

- name: Install remi repo
  yum:
    name: "{{ remi_centos_5_url }}"
    update_cache: yes
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version5 }}"

- name: Get pip 
  get_url: url="{{ pip_url }}" dest=/tmp/get-pip.py mode=0644
 
- name: Install pip
  command: /usr/bin/python get-pip.py
  args:
    chdir: /tmp

- name: Install libselinux-python
  yum: name=libselinux-python update_cache=yes

- name: Install monitoring and debuging package
  yum: name="{{ item }}" update_cache=yes
  with_items: "{{ packages }}"

- name: Disable selinux
  selinux: state=disabled

- name: Disable firewall
  service: name="firewalld" enabled=no state=stopped
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version7 }}"

- name: Disable firewall
  service: name="iptables" enabled=no state=stopped
  when:
    - ansible_distribution == "{{ distro_centos.name }}"
    - ansible_distribution_major_version == "{{ distro_centos.version6 }}"

- name: Restart and enable ntpd
  service: name="ntpd" enabled=yes state=restarted

- name: Create admin group
  group:
    name: "{{ admin_group }}"
    state: present

- name: Create sudoers for admin group
  template:
    src: admins.conf.j2
    dest: "{{ admin_sudo_file }}"
    owner: root
    group: root
    mode: 0440
    validate: 'visudo -cf %s' 

- name: Create administrator accounts
  user:
    name: "{{ item.name }}" 
    password: "{{ item.passwd }}"
    comment: "{{ item.full_name }}"
    shell: /bin/bash 
    groups: "{{ admin_group }}"
    append: yes 
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_file: .ssh/id_rsa
  with_items: "{{ admin_users }}"

- name: Config basic vim
  copy: src=vimrc.conf.j2 dest="/home/{{ item.name }}/.vimrc"
  with_items: "{{ admin_users }}"

- name: Config basic tmux
  copy: src=tmux.conf.j2 dest="/home/{{ item.name }}/.tmux.conf"
  with_items: "{{ admin_users }}"

- name: Check if filter user in sshd 
  command: grep -Fq "AllowUsers" /etc/ssh/sshd_config
  register: check_sshd
  ignore_errors: yes
  changed_when: False
  check_mode: no

- name: Allow user in sshd 
  lineinfile:
    dest: /etc/ssh/sshd_config
    line: 'AllowUsers {{ item.name }}'
    state: present 
    validate: '/usr/sbin/sshd -T -t -f %s'
  with_items: "{{ admin_users }}"
  when: check_sshd.rc == 0

- name: Restart sshd to apply config
  service: name="sshd" enabled=yes state=restarted
  when: check_sshd.rc == 0

- name: Change passwd root and disable root login
  user:
    name: "{{ root_user.name }}"
    password: "{{ root_user.recovery_passwd }}"
    shell: /sbin/nologin
  
- name: Disallow root SSH access
  lineinfile: 
    dest: /etc/ssh/sshd_config
    regexp: "^PermitRootLogin"
    line: "PermitRootLogin no"
    state: present
    validate: '/usr/sbin/sshd -T -t -f %s'

- name: Copy script fix e1000e
  copy: src=e1000e_fix.sh.j2 dest=/tmp/e1000e_fix.sh owner=root group=root mode=0744

- name: Run script fix e1000e
  shell: /tmp/e1000e_fix.sh

- name: Show msg
  debug: msg="You should recheck /tmp/e1000e_fix.sh"
